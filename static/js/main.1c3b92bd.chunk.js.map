{"version":3,"sources":["redux/weather-reducer.js","components/WeatherDays/WeatherCard/WeatherCard.jsx","components/WeatherDays/WeatherDays.jsx","components/common/Preloader/Preloader.jsx","components/WeatherDays/WeatherDaysConatainer.jsx","components/SearchWeather/SearchWeather.jsx","components/SearchWeather/SearchWeatherContainer.jsx","App.js","serviceWorker.js","redux/redux-store.js","index.js"],"names":["initialState","weathers","searchPlace","place","isFetching","setWeather","weatherItems","type","weatherReducer","state","action","timeNow","Math","floor","Date","now","timeTomorrow","filterDataByTime","filter","item","dt","test","dt_txt","dataByDays","arrDays","forEach","index","items","nextItem","formatDate","currentDay","replace","length","date","weekDay","toLocaleString","weekday","push","sort","a","b","reverse","fetching","WeatherCard","props","degree","icon","weather","directionWind","wind","deg","className","main","temp","src","alt","description","speed","SwiperCore","use","Navigation","Pagination","Scrollbar","A11y","WeatherDays","Row","Col","lg","map","spaceBetween","slidesPerView","key","Preloader","class","WeatherDaysConatainer","this","React","Component","connect","weatherPage","SearchWeather","Form","onSubmit","onSearch","autoComplete","xs","Group","controlId","Control","placeholder","onChange","value","searchTitle","Button","variant","e","preventDefault","toggleFetching","setPlace","axios","then","response","data","list","catch","updatePlace","target","App","Container","SearchWeatherContainer","Boolean","window","location","hostname","match","reducers","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"gXAMIA,EAAe,CACfC,SAAU,GACVC,YAAa,GACbC,MAAO,GACPC,YAAY,GAqELC,EAAa,SAACC,GAAD,MAAmB,CAAEC,KA/EzB,cA+E4CD,iBAMjDE,EAxEQ,WAAmC,IAAlCC,EAAiC,uDAAzBT,EAAcU,EAAW,uCACrD,OAAQA,EAAOH,MACX,IAfY,cAgBR,IAAII,EAAUC,KAAKC,MAAMC,KAAKC,MAAQ,KAAS,MAC3CC,EAAeL,EAAW,OAC1BM,EAAmBP,EAAOJ,aAAaY,QAAO,SAAAC,GAAI,OAC9CA,EAAKC,IAAMT,GAAWQ,EAAKC,IAAMJ,GAAiB,OAAQK,KAAKF,EAAKG,WAExEC,EAAa,GACbC,EAAU,GA4Bd,OA1BAP,EAAiBQ,SAAQ,SAACN,EAAMO,EAAOC,GACnC,IAEIC,EAFEC,EAAa,oCAGfC,EAAaH,EAAMD,GAAOJ,OAAOS,QAAQF,EAAY,YAGrDD,EADAD,EAAMK,OAAS,IAAMN,EACVC,EAAMD,GAAOJ,OAAOS,QAAQF,EAAY,YAExCF,EAAMD,EAAQ,GAAGJ,OAAOS,QAAQF,EAAY,YAG3DV,EAAKc,KAAOL,EACZT,EAAKe,QAAU,IAAIpB,KAAe,IAAVK,EAAKC,GAAa,OAAce,eAAe,KAAM,CAAEC,QAAS,SAEpFN,IAAeF,GACfJ,EAAQa,KAAKlB,GACbK,EAAQc,MAAK,SAAUC,EAAGC,GACtB,OAAO,IAAI1B,KAAK0B,EAAElB,QAAU,IAAIR,KAAKyB,EAAEjB,WACxCmB,UACHlB,EAAWc,KAAKb,GAChBA,EAAU,IAEVA,EAAQa,KAAKlB,MAGd,2BACAV,GADP,IAEIR,SAAS,GAAD,OAAMsB,KAGtB,IAtDa,eAuDT,OAAO,2BACAd,GADP,IAEIP,YAAaQ,EAAOR,cAG5B,IA3DU,YA4DN,OAAO,2BACAO,GADP,IAEIN,MAAOO,EAAOP,QAGtB,IAhEgB,kBAiEZ,OAAO,2BACAM,GADP,IAEIL,YAAaM,EAAOgC,WAG5B,QACI,OAAOjC,I,sBC1DnB,IAkBekC,EAlBK,SAACC,GACjB,IAb0BC,EAclBC,EAAI,2CAAuCF,EAAMzB,KAAK4B,QAAQ,GAAGD,KAA7D,WACRE,GAfsBH,EAeeD,EAAMzB,KAAK8B,KAAKC,KAd5C,MAAc,IACvBL,EAAS,MAAc,UACvBA,EAAS,MAAc,SACvBA,EAAS,MAAc,eACvBA,EAAS,MAAc,SACvBA,EAAS,MAAc,eACvBA,EAAS,KAAa,SACtBA,EAAS,KAAe,eACrB,SAQP,OACI,yBAAKM,UAAU,gBACX,yBAAKA,UAAU,sBAAsBP,EAAMzB,KAAKG,OAAOS,QAN5C,oCAMgE,OAC3E,yBAAKoB,UAAU,sBAAsBvC,KAAKC,MAAM+B,EAAMzB,KAAKiC,KAAKC,MAAhE,MACA,yBAAKF,UAAU,sBAAsBG,IAAKR,EAAMS,IAAKX,EAAMzB,KAAK4B,QAAQ,GAAGS,cAC3E,yBAAKL,UAAU,sBAAsBP,EAAMzB,KAAK4B,QAAQ,GAAGS,aAC3D,yBAAKL,UAAU,gCAAgCH,GAC/C,yBAAKG,UAAU,4BAA4BP,EAAMzB,KAAK8B,KAAKQ,MAA3D,c,uFClBZC,IAAWC,IAAI,CAACC,IAAYC,IAAYC,IAAWC,MAEnD,IA4BeC,EA5BK,SAACpB,GACjB,OACI,kBAACqB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAG,MACJ,4BAAKvB,EAAMzC,QAEf,kBAAC+D,EAAA,EAAD,CAAKC,GAAG,MAEAvB,EAAM3C,SAASmE,KAAI,SAACjD,EAAMO,GAAP,OACf,kBAACuC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAG,MACJ,yBAAKhB,UAAU,qBAAqBhC,EAAKO,GAAOQ,SAChD,yBAAKiB,UAAU,qBAAqBhC,EAAKO,GAAOO,OAEpD,kBAACiC,EAAA,EAAD,CAAKC,GAAG,MACJ,kBAAC,IAAD,CAAQE,aAAc,GAAIC,cAAe,EAAGnB,UAAU,uBACjDhC,EAAKiD,KAAI,SAACrB,EAASrB,GAAV,OACN,kBAAC,IAAD,CAAayB,UAAU,8BAA6B,kBAAC,EAAD,CAAahC,KAAM4B,EAASwB,IAAK7C,iBClB9G8C,G,MARG,SAAC5B,GACf,OACI,yBAAKO,UAAU,qBACX,yBAAKsB,MAAM,cAAa,8BAAW,kCCGzCC,E,uKAEE,OACI,yBAAKvB,UAAU,eACVwB,KAAK/B,MAAMxC,WACR,kBAAC,EAAD,MACAuE,KAAK/B,MAAM3C,SAAS+B,OAChB,kBAAC,EAAD,CAAa/B,SAAU0E,KAAK/B,MAAM3C,SAAUE,MAAOwE,KAAK/B,MAAMzC,QAC3DwE,KAAK/B,MAAMzC,MAAwC,gIAA8BwE,KAAK/B,MAAMzC,MAAzE,sJ,GARVyE,IAAMC,WAwB3BC,eARO,SAACrE,GACnB,MAAO,CACHR,SAAUQ,EAAMsE,YAAY9E,SAC5BE,MAAOM,EAAMsE,YAAY5E,MACzBC,WAAYK,EAAMsE,YAAY3E,cAIE,CAAEC,cAA3ByE,CAAyCJ,G,yBCbzCM,EAjBO,SAACpC,GACnB,OACI,kBAACqC,EAAA,EAAD,CAAMC,SAAUtC,EAAMuC,SAAUC,aAAa,OACzC,kBAACH,EAAA,EAAKhB,IAAN,KACI,kBAACC,EAAA,EAAD,CAAKmB,GAAI,IACL,kBAACJ,EAAA,EAAKK,MAAN,CAAYC,UAAU,iBAClB,kBAACN,EAAA,EAAKO,QAAN,CAAcjF,KAAK,OAAQkF,YAAY,yIAA2BC,SAAU9C,EAAM8C,SAAUC,MAAO/C,EAAMgD,gBAGjH,kBAAC1B,EAAA,EAAD,CAAKmB,GAAI,GACL,kBAACQ,EAAA,EAAD,CAAQC,QAAQ,UAAU3C,UAAU,YAAY5C,KAAK,UAArD,sCCLdmE,E,4MAEFS,SAAW,SAACY,GACRA,EAAEC,iBACF,EAAKpD,MAAMqD,gBAAe,GAC1B,EAAKrD,MAAMsD,SAAS,EAAKtD,MAAM1C,aAC/BiG,MAAA,6DAAgE,EAAKvD,MAAM1C,YAA3E,iEACKkG,MAAK,SAAAC,GACF,EAAKzD,MAAMqD,gBAAe,GAC1B,EAAKrD,MAAMvC,WAAWgG,EAASC,KAAKC,SACrCC,OAAM,WACL,EAAK5D,MAAMqD,gBAAe,GAC1B,EAAKrD,MAAMvC,WAAW,Q,EAIlCqF,SAAW,SAACK,GACR,EAAKnD,MAAM6D,YAAYV,EAAEW,OAAOf,Q,uDAKhC,OAAQ,kBAAC,EAAD,CAAeR,SAAUR,KAAKQ,SAAUO,SAAUf,KAAKe,SAAUE,YAAajB,KAAK/B,MAAM1C,kB,GAtBrE0E,IAAMC,WAkC3BC,eARO,SAACrE,GACnB,MAAO,CACHP,YAAaO,EAAMsE,YAAY7E,YAC/BC,MAAOM,EAAMsE,YAAY5E,MACzBC,WAAYK,EAAMsE,YAAY3E,cAIE,CAAEC,aAAYoG,YNsC7B,SAACvG,GAAD,MAAkB,CAAEK,KA/ExB,eA+E4CL,gBMtCEgG,SNuC7C,SAAC/F,GAAD,MAAY,CAAEI,KA/ElB,YA+EmCJ,UMvCwB8F,eNwCjD,SAACvD,GAAD,MAAe,CAAEnC,KA/ErB,kBA+E4CmC,cMxCrDoC,CAAgFJ,GCxBhFiC,MAZf,WACE,OAEE,yBAAKxD,UAAU,OACb,kBAACyD,EAAA,EAAD,KACE,kBAACC,EAAD,MACA,kBAAC,EAAD,SCAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCfFC,EAAWC,YAAgB,CAC3BrC,YAAavE,IAGb6G,EAAQC,YAAYH,GACxBJ,OAAOM,MAAQA,EACAA,QCDfE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,QAGJK,SAASC,eAAe,SFqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAyB,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1c3b92bd.chunk.js","sourcesContent":["const SET_WEATHER = 'SET-WEATHER';\r\nconst UPDATE_PLACE = 'UPDATE-PLACE';\r\nconst SET_PLACE = 'SET-PLACE';\r\nconst TOGGLE_FETCHING = 'TOGGLE-FETCHING';\r\n\r\n\r\nlet initialState = {\r\n    weathers: [],\r\n    searchPlace: '',\r\n    place: '',\r\n    isFetching: false\r\n}\r\n\r\nconst weatherReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_WEATHER: {\r\n            let timeNow = Math.floor(Date.now() / 1000) + (3 * 60 * 60),\r\n                timeTomorrow = timeNow + (2 * 24 * 60 * 60),\r\n                filterDataByTime = action.weatherItems.filter(item =>\r\n                    item.dt >= timeNow && item.dt <= timeTomorrow && (/.+/gi).test(item.dt_txt)\r\n                ),\r\n                dataByDays = [],\r\n                arrDays = [];\r\n\r\n            filterDataByTime.forEach((item, index, items) => {\r\n                const formatDate = /(\\d{4})-(\\d{1,2})-(\\d{1,2})(.+)/gi;\r\n\r\n                let nextItem,\r\n                    currentDay = items[index].dt_txt.replace(formatDate, \"$3-$2-$1\");\r\n\r\n                if (items.length - 1 === index) {\r\n                    nextItem = items[index].dt_txt.replace(formatDate, \"$3-$2-$1\");\r\n                } else {\r\n                    nextItem = items[index + 1].dt_txt.replace(formatDate, \"$3-$2-$1\");\r\n                }\r\n\r\n                item.date = nextItem;\r\n                item.weekDay = new Date(item.dt * 1000 - (3 * 60 * 60)).toLocaleString('ru', { weekday: 'long' });\r\n\r\n                if (currentDay !== nextItem) {\r\n                    arrDays.push(item);\r\n                    arrDays.sort(function (a, b) {\r\n                        return new Date(b.dt_txt) - new Date(a.dt_txt);\r\n                    }).reverse();\r\n                    dataByDays.push(arrDays);\r\n                    arrDays = [];\r\n                } else {\r\n                    arrDays.push(item);\r\n                }\r\n            })\r\n            return {\r\n                ...state,\r\n                weathers: [...dataByDays]\r\n            };\r\n        }\r\n        case UPDATE_PLACE: {\r\n            return {\r\n                ...state,\r\n                searchPlace: action.searchPlace\r\n            };\r\n        }\r\n        case SET_PLACE : {\r\n            return {\r\n                ...state,\r\n                place: action.place\r\n            };\r\n        }\r\n        case TOGGLE_FETCHING : {\r\n            return {\r\n                ...state,\r\n                isFetching: !action.fetching\r\n            };\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport let setWeather = (weatherItems) => ({ type: SET_WEATHER, weatherItems });\r\nexport let updatePlace = (searchPlace) => ({ type: UPDATE_PLACE, searchPlace });\r\nexport let setPlace = (place) => ({ type: SET_PLACE, place });\r\nexport let toggleFetching = (fetching) => ({ type: TOGGLE_FETCHING, fetching });\r\n\r\n\r\nexport default weatherReducer;","\r\nimport React from 'react';\r\nimport './style.scss';\r\n\r\nfunction toTextualDescription(degree) {\r\n    if (degree > 337.5) return 'C';\r\n    if (degree > 292.5) return 'CЗ';\r\n    if (degree > 247.5) return 'З';\r\n    if (degree > 202.5) return 'ЮЗ';\r\n    if (degree > 157.5) return 'Ю';\r\n    if (degree > 122.5) return 'ЮВ';\r\n    if (degree > 67.5) return 'В';\r\n    if (degree > 22.5) { return 'СВ'; }\r\n    return 'С';\r\n}\r\n\r\nconst WeatherCard = (props) => {\r\n    const formatDate = /(\\d{4})-(\\d{1,2})-(\\d{1,2})(.+)/gi;\r\n        let icon = `http://openweathermap.org/img/wn/${props.item.weather[0].icon}@2x.png`,\r\n        directionWind = toTextualDescription(props.item.wind.deg);\r\n\r\n    return (\r\n        <div className=\"weather-card\">\r\n            <div className=\"weather-card__time\">{props.item.dt_txt.replace(formatDate, \"$4\")}</div>\r\n            <div className=\"weather-card__temp\">{Math.floor(props.item.main.temp)} C</div>\r\n            <img className=\"weather-card__image\" src={icon} alt={props.item.weather[0].description} />\r\n            <div className=\"weather-card__type\">{props.item.weather[0].description}</div>\r\n            <div className=\"weather-card__wind-direction\">{directionWind}</div>\r\n            <div className=\"weather-card__wind-speed\">{props.item.wind.speed}м/c</div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherCard;","import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport WeatherCard from './WeatherCard/WeatherCard';\r\nimport SwiperCore, { Navigation, Pagination, Scrollbar, A11y } from 'swiper';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport 'swiper/swiper.scss';\r\nimport 'swiper/components/navigation/navigation.scss';\r\nimport 'swiper/components/pagination/pagination.scss';\r\nimport 'swiper/components/scrollbar/scrollbar.scss';\r\nimport './style.scss';\r\nSwiperCore.use([Navigation, Pagination, Scrollbar, A11y]);\r\n\r\nconst WeatherDays = (props) => {\r\n    return (\r\n        <Row>\r\n            <Col lg=\"12\">\r\n                <h1>{props.place}</h1>\r\n            </Col>\r\n            <Col lg=\"12\">\r\n                {\r\n                    props.weathers.map((item, index) => (\r\n                        <Row>\r\n                            <Col lg=\"12\">\r\n                                <div className=\"weather-day__name\">{item[index].weekDay}</div>\r\n                                <div className=\"weather-day__date\">{item[index].date}</div>\r\n                            </Col>\r\n                            <Col lg=\"12\">\r\n                                <Swiper spaceBetween={20} slidesPerView={4} className=\"weather-days-slider\">\r\n                                    {item.map((weather, index) => (\r\n                                        <SwiperSlide className=\"weather-days-slider__slide\"><WeatherCard item={weather} key={index} /></SwiperSlide>\r\n                                    ))}\r\n                                </Swiper>\r\n                            </Col>\r\n                        </Row>))\r\n                }\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default WeatherDays;","import React from 'react';\r\nimport './preloader.scss';\r\n\r\nconst Preloader = (props) => {\r\n    return (\r\n        <div className=\"wrapper-preloader\">\r\n            <div class=\"lds-ripple\"><div></div><div></div></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","\r\nimport React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { setWeather } from \"../../redux/weather-reducer\"\r\nimport WeatherDays from './WeatherDays';\r\nimport Preloader from '../common/Preloader/Preloader';\r\n\r\n\r\n\r\nclass WeatherDaysConatainer extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"weather-day\">\r\n                {this.props.isFetching  ?\r\n                    <Preloader /> :\r\n                    this.props.weathers.length ?\r\n                        <WeatherDays weathers={this.props.weathers} place={this.props.place} />\r\n                        : !this.props.place ? 'Введите в поле поиска город' : 'Такого места не найдено: ' + this.props.place\r\n                }\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        weathers: state.weatherPage.weathers,\r\n        place: state.weatherPage.place,\r\n        isFetching: state.weatherPage.isFetching\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { setWeather })(WeatherDaysConatainer);","import React from 'react';\r\nimport { Form, Button, Col } from 'react-bootstrap';\r\n\r\nconst SearchWeather = (props) => {\r\n    return (\r\n        <Form onSubmit={props.onSearch} autoComplete=\"off\">\r\n            <Form.Row>\r\n                <Col xs={10}>\r\n                    <Form.Group controlId=\"formBasicText\">\r\n                        <Form.Control type=\"text\"  placeholder=\"Введите назнавние города\" onChange={props.onChange} value={props.searchTitle} />\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col xs={2}>\r\n                    <Button variant=\"primary\" className=\"btn-block\" type=\"submit\">Найти</Button>\r\n                </Col>\r\n            </Form.Row>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default SearchWeather;","\r\nimport React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport * as axios from \"axios\";\r\nimport { setWeather, updatePlace, setPlace, toggleFetching } from \"../../redux/weather-reducer\";\r\nimport SearchWeather from \"./SearchWeather\";\r\n\r\n\r\nclass WeatherDaysConatainer extends React.Component {\r\n\r\n    onSearch = (e) => {\r\n        e.preventDefault();\r\n        this.props.toggleFetching(false);\r\n        this.props.setPlace(this.props.searchPlace);\r\n        axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${this.props.searchPlace}&lang=ru&units=metric&APPID=1204ec86d11d969f5c14a0f8ec54ab6b`)\r\n            .then(response => {\r\n                this.props.toggleFetching(true);\r\n                this.props.setWeather(response.data.list);\r\n            }).catch(() => {\r\n                this.props.toggleFetching(true);\r\n                this.props.setWeather([]);\r\n            })\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.props.updatePlace(e.target.value);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (<SearchWeather onSearch={this.onSearch} onChange={this.onChange} searchTitle={this.props.searchPlace} />);\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        searchPlace: state.weatherPage.searchPlace,\r\n        place: state.weatherPage.place,\r\n        isFetching: state.weatherPage.isFetching\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { setWeather, updatePlace, setPlace, toggleFetching })(WeatherDaysConatainer);","import React from 'react';\nimport './App.scss';\nimport { Container } from 'react-bootstrap';\nimport WeatherDaysConatainer from './components/WeatherDays/WeatherDaysConatainer';\nimport SearchWeatherContainer from './components/SearchWeather/SearchWeatherContainer';\n\nfunction App() {\n  return (\n\n    <div className=\"App\">\n      <Container>\n        <SearchWeatherContainer />\n        <WeatherDaysConatainer />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, combineReducers } from \"redux\";\r\nimport weatherReducer from \"./weather-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    weatherPage: weatherReducer,\r\n});\r\n\r\nlet store = createStore(reducers);\r\nwindow.store = store;\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/redux-store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}